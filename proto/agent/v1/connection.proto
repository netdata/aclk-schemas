syntax = "proto3";
option go_package = "agent/v1;agent";

package agent.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "proto/aclk/v1/lib.proto";

message UpdateAgentConnection {
    string claim_id = 1;
    bool reachable = 2;

    int64 session_id = 3;

    ConnectionUpdateSource update_source = 4;

    // mqtt_broker_addr shard to use for reaching the agent
    // cloud injects this information
    string mqtt_broker_addr = 5;

    google.protobuf.Timestamp updated_at = 6;

    // vmq_instance_id broker shard to use for reaching the agent
    // cloud injects this information
    int32 vmq_instance_id = 7;

    // > 15 optional fields:
    // How long the system was running until connection (only applicable when reachable=true)
    google.protobuf.Duration system_uptime = 15;

    // How long the netdata agent was running until connection (only applicable when reachable=true)
    google.protobuf.Duration agent_uptime = 16;

    repeated aclk_lib.v1.Capability capabilities = 17;

    repeated AgentExitReason exit_reasons = 18;
}

enum AgentExitReason {
    AGENT_EXIT_REASON_NONE = 0;
    // signals - abnormal termination
    AGENT_EXIT_REASON_SIGBUS = 1;
    AGENT_EXIT_REASON_SIGSEGV = 2;
    AGENT_EXIT_REASON_SIGFPE = 3;
    AGENT_EXIT_REASON_SIGILL = 4;
    AGENT_EXIT_REASON_SIGABRT = 5;
    AGENT_EXIT_REASON_SIGSYS = 6;  // Bad system call
    AGENT_EXIT_REASON_SIGXCPU = 7;  // CPU time limit exceeded
    AGENT_EXIT_REASON_SIGXFSZ = 8;  // File size limit exceeded
    // signals - normal termination
    AGENT_EXIT_REASON_SIGQUIT             = 9;     // rare, but graceful
    AGENT_EXIT_REASON_SIGTERM             = 10;     // received on Linux, FreeBSD, MacOS
    AGENT_EXIT_REASON_SIGINT              = 11;    // received on Windows on normal termination
    //
    AGENT_EXIT_REASON_OUT_OF_MEMORY       = 12;
    AGENT_EXIT_REASON_ALREADY_RUNNING     = 13;
    // abnormal termination via a fatal message
    AGENT_EXIT_REASON_FATAL               = 14;
    // normal termination via APIs
    AGENT_EXIT_REASON_API_QUIT            = 15;     // developer only
    AGENT_EXIT_REASON_CMD_EXIT            = 16;     // netdatacli
    // windows specific, service stop
    AGENT_EXIT_REASON_SERVICE_STOP        = 17;
    // automatically detect when exit_initiated_set() is called
    // supports Linux, FreeBSD, MacOS, Windows
    AGENT_EXIT_REASON_SYSTEM_SHUTDOWN     = 18;
    // netdata update
    AGENT_EXIT_REASON_UPDATE              = 19;
    // timeout while shutting down
    AGENT_EXIT_REASON_SHUTDOWN_TIMEOUT    = 20;
}

message SendNodeInstances {
    string claim_id = 1;
    Config config = 2;
    // The ID of the space where this agent is claimed.
    string space_id = 3;
}

// ConnectionUpdateSource is to determine whether the connection update was issued 
enum ConnectionUpdateSource {
    // CONNECTION_UPDATE_SOURCE_UNSPECIFIED acts as default value for protobuf and is never specified
    CONNECTION_UPDATE_SOURCE_UNSPECIFIED = 0;
    // CONNECTION_UPDATE_SOURCE_AGENT A direct message from an agent
    CONNECTION_UPDATE_SOURCE_AGENT = 1;
    // CONNECTION_UPDATE_SOURCE_LWT message delivered as the Last Will and Testiment  from MQTT broker if an agent connection with the broker is lost 
    CONNECTION_UPDATE_SOURCE_LWT = 2;
    // CONNECTION_UPDATE_SOURCE_HEURISTIC A cloud generated message to sanitize incorrect internal state
    CONNECTION_UPDATE_SOURCE_HEURISTIC = 3;
}

message AgentConfig {
    string dashboards = 1;
    string alert_notifications = 2;
}

message CloudConfig {
    string dashboards = 1;
    string alert_notifications = 2;
}

message Config {
    reserved 1 to 3;
    AgentConfig agent_config = 4;
    CloudConfig cloud_config = 5;
}
