syntax = "proto3";

package chart.v1;

import "google/protobuf/timestamp.proto";

option go_package = "chart/context/v1;chartcontext";

// ContextUpdated contains context data.
message ContextUpdated {
    // context id
    string id = 1;
    uint64 version = 2;
    // claim_id, node_id pair is used to identify the NodeInstance
    string claim_id = 3;
    string node_id = 4;
    // first_entry, last_entry are used to set the time boudaries of the context
    google.protobuf.Timestamp first_entry = 5;
    google.protobuf.Timestamp last_entry = 6;
    // deleted flag is used to signal a context deletion
    bool deleted = 7;
    // context config fields
    string chart_type = 8;
    string title = 9;
    uint32 priority = 10;
    string units = 11;
}

// ContextsUpdated is an Event produced by the Agent, consumed by the Cloud.
//
// it contains a collection of ContextUpdated messages for a specific NodeInstance.
message ContextsUpdated {
    // contexUpdates contains the collection of context updates
    repeated ContextUpdated contextUpdates = 1;
    // claim_id, node_id pair identifies the node instance
    string claim_id = 2;
    string node_id = 3;
}

// StartStreamingContexts is a Command produced by the Cloud, consumed by the Agent.
//
// It instructs the Agent to start sending ContextsUpdated messages for a NodeInstance
// after the last sequence_id that the Cloud has successfully ingested.
message StartStreamingContexts {
    // claim_id, node_id pair is used to identify the NodeInstance.
    string claim_id = 1;
    string node_id = 2;
    // version_hash tells the Agent the current version hash for the contexts received
    // if the version hash calculated by the Agent is different, Agent will request
    // to re-sync all contexts.
    uint64 version_hash= 3;
}

// StopStreamingContexts is a Command produced by the Cloud, consumed by the Agent.
//
// It instructs the Agent to stop sending ContextsUpdated messages for a NodeInstance
// due to a reason.
message StopStreamingContexts {
    // claim_id, node_id pair is used to identify the node instance
    string claim_id = 1;
    string node_id = 2;
    
    StopStreamingContextsReason reason = 3;
}

enum StopStreamingContextsReason {
  RATE_LIMIT_EXCEEDED = 0;
}

// ResetContextMessages is a command produced by the Agent, consumed by the Cloud.
//
// This command instructs the Cloud to clear its Context state for a specific NodeInstance and re-sync
// because of a reason.
message ResetContextMessages {
    // claim_id, node_id pair is used to identify the Node Instance
    string claim_id = 1;
    string node_id = 2;
  
    ResetContextReason reason = 3;
}

enum ResetContextReason {
    VERSION_HASH_MISMATCH = 0;
}
